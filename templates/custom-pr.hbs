# Create a Custom PR Summary!

You can effortlessly generate dynamic summaries and PR comments using Handlebars.

Your templates will be converted into markdown and rendered in Github!

## Example: Generating a Summary

Let's start with the basics, a summary table that gives an overview of your test results (you might have seen this one somewhere!). This table is straightforward yet powerful, helping you quickly communicate the state of your tests:

| **Tests üìù** | **Passed ‚úÖ** | **Failed ‚ùå** | **Skipped ‚è≠Ô∏è** | **Pending ‚è≥** | **Other ‚ùì** | **Flaky üçÇ** | **Duration ‚è±Ô∏è** |
| --- | --- | --- | --- | --- | --- | --- | --- |
| {{results.summary.tests}} | {{results.summary.passed}} | {{results.summary.failed}} | {{results.summary.skipped}} | {{results.summary.pending}} | {{results.summary.other}} | {{countFlaky results.tests}} | {{formatDuration results.summary.start results.summary.stop}} |

This table is generated by referencing various properties from your CTRF report, making it easy to create detailed and customized summaries.

In addition, you can leverage custom methods like `countFlaky` and `formatDuration` to enhance your summary:

Count of flaky tests: {{countFlaky results.tests}}
Duration of execution: {{formatDuration results.summary.start results.summary.stop}}

Remember, you're not just writing markdown‚Äîyou're writing markdown enhanced with Handlebars, which means you can take full advantage of markdown's features while adding dynamic content.

## Example: Iterating Over the Tests Array

Next, let's focus on generating a report specifically for failed tests. To do this, we'll iterate through the CTRF tests array and filter out the failed tests:

| **Name** | **Status** | **Failure Message** |
| --- | --- | --- |
{{#each results.tests}}
  {{#if (eq status "failed")}}
  | {{name}} | {{status}} ‚ùå | {{#if message}}{{message}}{{else}}No failure message{{/if}} |
  {{/if}}
{{/each}}

You might have noticed, this one is using a helper called `eq`. You can use this for property comparisons directly within your template logic.

## Adding Extra Markdown Elements

You can further enrich your summaries by tagging collaborators, adding tasks, and linking to important resources. Here's how:

### Tag a collaborator:

You might want to notify someone specific, like @Ma11hewThomas.

### You can add tasks!

- [x] Passed all unit tests
- [ ] Review code quality
- [ ] Update documentation

### Include useful links:

[GitHub Actions Documentation](https://docs.github.com/en/actions)

### Adding Collapsible Sections

If you have extensive details that might clutter your summary, you can use collapsible sections to hide and reveal information as needed:

<details>
  <summary>See detailed test results</summary>
  
  <br>

  | **Name** | **Status** | **Failure Message** |
  | --- | --- | --- |
  {{#each results.tests}}
  | {{name}} | {{status}} | {{#if message}}{{message}}{{else}}No failure message{{/if}} |
  {{/each}}
</details>

